package ${package}.${moduleName}.rest;

import java.util.Arrays;
import java.util.List;
import ${package}.base.base.BaseResouce;
import ${package}.base.web.rest.dto.ResultDto;
import ${QueryModel};
import ${package}.${moduleName}.domain.${className};
import ${package}.${moduleName}.service.${className}Service;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/api/${className}")
public class ${className}Resource extends BaseResouce {


	@Autowired
	private ${className}Service ${classname}Service;

	/**
	 * @方法名称: create
	 * @方法描述: 新增${comments}
	 * @参数与返回说明:
	 * @算法描述:
	 */
	@PostMapping(value = "/create")
	public ResultDto<Integer> create(${className} ${classname}) throws Exception {
		int result = ${classname}Service.create(${classname});
		ResultDto<Integer> resultDto = new ResultDto<>();
		if (result >= 1) {
			resultDto.setMessage("添加${comments}" + ${classname}.get${pk.attrName}()
					+ "创建成功！ ");
		}
		resultDto.setData(result);
		return resultDto;
	}

	/**
	 * @方法名称:show
	 * @方法描述:${comments}信息查询
	 * @参数与返回说明:
	 * @算法描述:
	 */
	@GetMapping(value = "/show")
	public ResultDto<${className}> show(@RequestParam("${pk.attrname}") String ${pk.attrname}) throws Exception {
		return new ResultDto<${className}>(1, ${classname}Service.show(${pk.attrname}));
	}

	/**
	 * @方法名称:index
	 * @方法描述:${comments}查询
	 * @参数与返回说明:
	 * @算法描述:
	 */
	@GetMapping(value = "/index")
	public ResultDto<List<${className}>> index(QueryModel model)
			throws Exception {
		List<${className}> list = ${classname}Service.index(model);
		PageInfo<${className}> pageInfo = new PageInfo<>(list);
		return new ResultDto<List<${className}>>(pageInfo.getTotal(), list);
	}

	/**
	 * @方法名称: update
	 * @方法描述: 修改${comments}
	 * @参数与返回说明:
	 * @算法描述:
	 */
	@PostMapping(value = "/update")
	public ResultDto<Integer> update(${className} ${classname}) throws Exception {
		int result =  ${classname}Service.update(${classname});
		ResultDto<Integer> resultDto = new ResultDto<>();
		if (result >= 1) {
			resultDto.setMessage("模块" + ${classname}.get${pk.attrName}() + "修改成功！");
		}
		resultDto.setData(result);
		return resultDto;
	}

	/**
	 * @方法名称: delete
	 * @方法描述: 删除${comments}
	 * @参数与返回说明:
	 * @算法描述:
	 */
	@PostMapping(value = "/delete/{${pk.attrname}}")
	public ResultDto<Integer> delete(@PathVariable("${pk.attrname}") String ${pk.attrname}) throws Exception {
		int result = ${classname}Service.delete(${pk.attrname});
		ResultDto<Integer> resultDto = new ResultDto<>();
		if (result >= 1) {
			resultDto.setMessage("成功删除模块" + ${pk.attrname} + "");
		}
		resultDto.setData(result);
		return resultDto;
	}
}
