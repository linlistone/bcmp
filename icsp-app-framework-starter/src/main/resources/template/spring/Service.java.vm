package ${package}.${moduleName}.service;

import ${package}.base.base.BaseService;
import ${QueryModel};
import ${package}.${moduleName}.domain.${className};
import ${package}.${moduleName}.repository.mapper.${className}Mapper;
import ${package}.common.exception.ICSPException;
import java.util.List;
import com.github.pagehelper.PageHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Service
@Transactional
public class ${className}Service extends BaseService {


	@Autowired
	private ${className}Mapper ${classname}Mapper;
	/**
	 * @throws Exception
	 * @方法名称: show
	 * @方法描述: 创建信息
	 * @参数与返回说明:
	 * @算法描述: 无
	 */
	public int create(${className} ${classname}) throws Exception {
		${classname}.set${pk.attrName}(createUUId());
		//domain.setLastChgDt(DateUtil.getFormatDateTime());
		return ${classname}Mapper.insert(${classname});
	}

	/**
	 * @throws Exception
	 * @方法名称: show
	 * @方法描述: 查询信息 by ${pk.attrName}
	 * @参数与返回说明:
	 * @算法描述: 无
	 */
	public ${className} show(String ${pk.attrname}) throws Exception {
		QueryModel model = new QueryModel();
		model.addCondition("${pk.attrname}", ${pk.attrname});
		List<${className}> list = index(model);
		if (list == null || list.isEmpty()) {
			throw new ICSPException("数据不存在" + ${pk.attrname});
		}
		${className} ${classname} = list.get(0);
		return  ${classname};
	}

	/**
	 * @方法名称: index
	 * @方法描述: 查询所有 
	 * @参数与返回说明:
	 * @算法描述: 无
	 */
	public List<${className}> index(QueryModel model)
			throws Exception {
		PageHelper.startPage(model.getPage(), model.getSize());
		List<${className}> list = ${classname}Mapper.selectByModel(model);
		PageHelper.clearPage();
		return list;
	}

	/**
	 * @方法名称: update
	 * @方法描述: 根据数据库主建更新
	 * @参数与返回说明:
	 * @算法描述:
	 */
	public int update(${className} ${classname}) throws Exception {
		//domain.setLastChgDt(DateUtil.getFormatDateTime());
		return ${classname}Mapper.updateByPrimaryKey(${classname});
	}

	/**
	 * @方法名称: delete
	 * @方法描述: 根据主键删除
	 * @参数与返回说明:
	 * @算法描述:
	 */
	public int delete(String ${pk.attrname}) throws Exception {
		return ${classname}Mapper.deleteByPrimaryKey(${pk.attrname});
	}

	/**
	 * @方法名称: delete
	 * @方法描述:根据多个主键删除
	 * @参数与返回说明:
	 * @算法描述:
	 */
	public int deleteByIds(String ids) throws Exception {
		return ${classname}Mapper.deleteByIds(ids);
	}
}

