/** Yufp-core 1.2.1 Copyright © 2017-present Yusys All Rights Reserved. */
window.yufp = {core: {version: '1.2.1.191225'}}, (function (l, o) {
  var t = function () {}; t.prototype._toString = Object.prototype.toString, t.prototype.class2type = {'[object Boolean]': 'boolean', '[object Number]': 'number', '[object String]': 'string', '[object Function]': 'function', '[object Array]': 'array', '[object Date]': 'date', '[object RegExp]': 'regExp', '[object Object]': 'object'}, t.prototype.type = function (o) {
    var t = this._toString.call(o); return o == null ? String(o) : this.class2type[t] || 'object';
  }, t.prototype.isWindow = function (o) {
    return o != null && o === o.window;
  }, t.prototype.isFunction = function (o) {
    return this.type(o) == 'function';
  }, t.prototype.isArray = function (o) {
    return this.type(o) === 'array';
  }, t.prototype.isArrayLike = function (o) {
    var t = this.type(o); if (t === 'function' || this.isWindow(o)) {
      return !1;
    } var e = !!o && 'length' in o && o.length; return t === 'array' || e === 0 || typeof e == 'number' && e > 0 && e - 1 in o;
  }, t.prototype.merge = function (o, t) {
    for (var e = o.length, r = 0, i = +t.length; r < i; r++) {
      o[e++] = t[r];
    } return o.length = e, o;
  }, t.prototype.makeArray = function (o, t) {
    var e = t || []; return o != null && (this.isArrayLike(Object(o)) ? this.merge(e, typeof o == 'string' ? [o] : o) : e.push(o)), e;
  }, t.prototype.isPlainObject = function (o) {
    if (!o || this.type(o) !== 'object' || o.nodeType || this.isWindow(o)) {
      return !1;
    } var t, e = Object.prototype.hasOwnProperty; if (o.constructor && !e.call(o, 'constructor') && !e.call(o.constructor.prototype, 'isPrototypeOf')) {
      return !1;
    } for (t in o) {
      break;
    } return void 0 === t || e.call(o, t);
  }, t.prototype.clone = function (o, t) {
    return this.extend(!0, t, o);
  }, t.prototype.getInnerText = function (o) {
    var t = typeof o.innerText == 'string' ? o.innerText : o.textContent; return o = null, t;
  }, t.prototype.setInnerText = function (o, t) {
    typeof o.innerText == 'string' ? o.innerText = t : o.textContent = t, o = null;
  }, t.prototype.getNextElementSibling = function (o) {
    var t = null; return t = o.nextElementSibling ? o.nextElementSibling : o.nextSibling, o = null, t;
  }, t.prototype.getFirstElementChild = function (o) {
    var t = null; return t = o.firstElementChild ? o.firstElementChild : o.firstChild, o = null, t;
  }, t.prototype.args2Arr = function (o) {
    return o.length === 1 ? [o[0]] : Array.apply(null, o);
  }, t.prototype.extend = function () {
    var o = l.utils.args2Arr(arguments), t = o[0] || {}, e = 1, r = o.length, i = !1; for (typeof t == 'boolean' && (i = t, t = o[e] || {}, e++), typeof t == 'object' || this.isFunction(t) || (t = {}), e === r && (t = this, e--); e < r; e++) {
      var n = o[e]; if (n != null && n != null) {
        for (var s in n) {
          var _ = t[s], a = n[s]; if (t !== a) {
            var c = !1; if (i && a && (this.isPlainObject(a) || (c = this.isArray(a)))) {
              var u = void 0; u = c ? _ && this.isArray(_) ? _ : [] : _ && this.isPlainObject(_) ? _ : {}, t[s] = this.extend(i, u, a);
            } else {
              void 0 !== a && (t[s] = a);
            }
          }
        }
      }
    } return t;
  }, t.prototype.each = function (o, t, e) {
    if (this.isArrayLike(o)) {
      for (var r = 0, i = o.length; r < i && !1 !== t.call(o[r], r, o[r]); r++) {
        ;
      }
    } else {
      for (var n in o) {
        if (e) {
          if (o.hasOwnProperty(n) && !1 === t.call(o[n], n, o[n])) {
            break;
          }
        } else if (!1 === t.call(o[n], n, o[n])) {
          break;
        }
      }
    } return o;
  }, t.prototype.uidStore = {}, t.prototype.uid = function (o, t, e) {
    o = o || 'UID', t = t || 0, e = e || ''; var r = this.uidStore[o] || t; return this.uidStore[o] = ++r, e + r;
  }, t.prototype.uidcode = function (o, t) {
    return (o = o || '') + t;
  }, t.prototype.hashCode = function (o) {
    for (var t = 0, e = o.length, r = 0; r < e; r++) {
      (t = 31 * t + o.charCodeAt(r)) > 2147483647 && (t %= 2147483648);
    } return t;
  }, t.prototype.location = function () {
    var o = window.location, t = o.pathname, e = t.substr(1).indexOf('/'), r = e > -1 ? t.substr(0, e + 1) : t; return r = r === '/' ? '' : r, {origin: o.protocol + '//' + o.host, basePath: r, hash: o.hash, search: o.search};
  }, t.prototype.urlParam2Object = function (o) {
    var t = o.split('?')[1]; return t ? JSON.parse('{"' + decodeURIComponent(t).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g, '":"').replace(/\n/g, '\\n') + '"}') : {};
  }, l.utils = new t();
}(yufp.core, yufp)), (function (n, o) {
  var s = function (o) {
      this.id = o, this.children = {};
    }, t = function () {
      this.root = new s('_root_');
    }; t.prototype.put = function () {
    var o = n.utils.args2Arr(arguments), t = o.length; if (t < 2) {
      return n.logger.error('core.bus: The parameter includes at least one (key,value)'), !1;
    } for (var e = this.root, r = 0; r < t - 1; r++) {
      var i = o[r]; e.children[i] || (e.children[i] = new s(i)), e = e.children[i];
    } return e.data = o[t - 1], !0;
  }, t.prototype.get = function () {
    var o = n.utils.args2Arr(arguments), t = o.length; if (t != 0) {
      for (var e = this.root, r = 0; r < t; r++) {
        var i = o[r]; if (!e.children[i]) {
          return;
        } e = e.children[i];
      } return e.data;
    }
  }, t.prototype.remove = function () {
    var o = n.utils.args2Arr(arguments), t = o.length; if (t == 0) {
      return !1;
    } for (var e = this.root, r = 0; r < t - 1; r++) {
      var i = o[r]; if (!e.children[i]) {
        return !1;
      } e = e.children[i];
    }i = o[t - 1]; return !!e.children[i] && (delete e.children[i], !0);
  }, n.bus = new t();
}(yufp.core, yufp)), (function (t, o) {
  function e () {
    this.fn = window.console, this.fn && (this.fn.debug = this.fn.debug ? this.fn.debug : this.fn.info, this.configLevel());
  }e.prototype.configLevel = function (o) {
    (o = o || {needInfo: !0, needDebug: !0, needwarn: !0, needError: !0}).isStrprint = void 0 === window.console.log.apply, t.utils.extend(this, o);
  }, e.prototype._print = function (o) {
    this.fn && this.fn[o] && (this.isStrprint ? this.fn[o](t.utils.args2Arr(arguments[1]).join(' ')) : this.fn[o].apply(this.fn, arguments[1]));
  }, e.prototype.info = function () {
    this.needInfo && this.fn && this._print('info', arguments);
  }, e.prototype.debug = function () {
    this.needDebug && this.fn && this._print('debug', arguments);
  }, e.prototype.warn = function () {
    this.needwarn && this.fn && this._print('warn', arguments);
  }, e.prototype.error = function () {
    this.needError && this.fn && this._print('error', arguments);
  }, t.logger = new e();
}(yufp.core, yufp)), (function (a, o) {
  function t (t) {
    var o = this, e = o.createXHR(); if (e) {
      var r = {}; a.utils.extend(!0, r, o.defaultSetting), a.utils.extend(!0, r, t), t = r, o.asyncTimeout(t, e), o.onreadystatechange(t, e); var i = t.type.toUpperCase(), n = o.processData(t, i); if (t.url += i == 'GET' && n ? (t.url.indexOf('?') === -1 ? '?' : '&') + n : '', e.open(t.type, encodeURI(t.url), t.async), e.withCredentials = 0, a.utils.type(t.beforeSend) == 'function') {
        var s = {}; a.utils.extend(!0, s, t), t.beforeSend.call(o, e, s);
      } if (t.cache || e.setRequestHeader('Cache-Control', 'no-cache'), typeof t.headers == 'object') {
        for (var _ in t.headers) {
          e.setRequestHeader(_, t.headers[_]);
        }
      } try {
        e.send(i != 'GET' && n ? n : null);
      } catch (o) {
        t.error && t.error(e, o.message), t.complete && t.complete(e, o.message);
      }
    } else {
      a.logger.error('core.ajax: Your browser not support AJAX XMLHttpRequest.');
    }
  }t.prototype.defaultSetting = {type: 'GET', async: !0, contentType: 'application/x-www-form-urlencoded; charset=UTF-8', dataType: 'string', cache: !1, timeout: 9e4, processData: !0}, t.prototype.processData = function (o, t) {
    var e = null; try {
      e = o.data && o.processData && typeof o.data != 'string' ? this.encode(o.data, t == 'GET' ? 'application/x-www-form-urlencoded' : o.headers['Content-Type']) : o.data;
    } catch (o) {
      a.logger.error('core.ajax: Request params format error；' + o.Message, o);
    } return e;
  }, t.prototype.onreadystatechange = function (t, e) {
    var r = this; e.onreadystatechange = function () {
      try {
        if (e.readyState < 4) {
          return void (t.loading && t.loading(e.readyState));
        } if (t.success && (e.status == 0 || e.status >= 200 && e.status < 300)) {
          var o = e.response == null ? e.responseText : e.response; if (e.status === 0 && !o) {
            return void (t.error && t.error(e, '网络请求异常'));
          } try {
            o = r.decode(o, t.dataType);
          } catch (o) {
            return void (t.error && t.error(e, o.message));
          }t.success(o, e.status, e);
        } else {
          t.error && t.error(e, e.status);
        }t.complete && t.complete(e, e.status);
      } catch (o) {
        throw o;
      }
    };
  }, t.prototype.asyncTimeout = function (o, t) {
    if (o.async) {
      try {
        t.timeout = o.timeout, t.ontimeout = function () {
          o.error && o.error(t, 'timeout'), o.complete && o.complete(t, 'timeout'), o = t = null;
        };
      } catch (o) {
        a.logger.warn('core.ajax: ie timeout, ' + o.Message, o);
      }
    }
  }, t.prototype.createXHR = function () {
    var t; try {
      t = new XMLHttpRequest();
    } catch (o) {
      for (var e = ['Msxml3.XMLHTTP', 'Msxml2.XMLHTTP', 'Microsoft.XMLHTTP'], r = 0, i = e.length; r < i; r++) {
        try {
          t = new window.ActiveXObject(e[r]); break;
        } catch (o) {
          continue;
        }
      }
    } return t;
  }, t.prototype.encode = function (o, t) {
    if (!o || typeof o == 'string' || !t) {
      return o;
    } t = t.toLowerCase(); var e = '', r = a.utils.type(o) == 'object'; if (t.indexOf('application/x-www-form-urlencoded') > -1) {
      if (r) {
        for (var i in o) {
          var n = o[i]; if (a.utils.type(n) == 'array') {
            for (var s = 0; s < n.length; s++) {
              var _ = i + '=' + n[s]; e.length > 0 && (e += '&'), e += _;
            }
          } else {
            _ = i + '=' + n; e.length > 0 && (e += '&'), e += _;
          }
        }
      } else {
        e = o;
      }
    } else {
      t.indexOf('application/json') > -1 || t.indexOf('text') == 0 ? r && (e = JSON.stringify(o)) : e = r ? JSON.stringify(o) : o;
    } return e;
  }, t.prototype.decode = function (o, t) {
    if (t == 'json' && a.utils.type(o) == 'string' && o != '') {
      try {
        o = JSON.parse(o);
      } catch (o) {
        throw a.logger.error('core.ajax: Response text format error ', o), o;
      }
    } return o;
  }, a.ajax = function (o) {
    new t(o);
  };
}(yufp.core, yufp)), (function (o, t) {
  var e, r = {}; function i () {
    this.doneFns = [], this.failFns = [], this.alwaysFns = [], this.status = r.Running;
  }(e = r)[e.Running = 0] = 'Running', e[e.Done = 1] = 'Done', e[e.Fail = 2] = 'Fail', i.prototype.fire = function () {
    if (this.status != r.Running) {
      if (this.alwaysFns) {
        for (;this.alwaysFns.length > 0;) {
          this.alwaysFns.shift().apply(this, this.args);
        }
      } if (this.status == r.Done) {
        for (;this.doneFns.length > 0;) {
          this.doneFns.shift().apply(this, this.args);
        }
      } else if (this.status == r.Fail) {
        for (;this.failFns.length > 0;) {
          this.failFns.shift().apply(this, this.args);
        }
      }
    }
  }, i.prototype.done = function (o) {
    return this.doneFns.push(o), this.fire(), this;
  }, i.prototype.fail = function (o) {
    return this.failFns.push(o), this.fire(), this;
  }, i.prototype.always = function (o) {
    return this.alwaysFns.push(o), this.fire(), this;
  }, i.prototype.resolve = function () {
    return this.args = o.utils.args2Arr(arguments), this.status = r.Done, this.fire(), this;
  }, i.prototype.reject = function () {
    return this.args = o.utils.args2Arr(arguments), this.status = r.Fail, this.fire(), this;
  }, o.Deferred = i;
}(yufp.core, yufp)), (function (t, o) {
  var e, r = {}; function i () {
    this.waitFns = [], this.chain = [], this.status = r.Free;
  }(e = r).Busy = 'busy', e.Free = 'free', i.prototype.fire = function () {
    if (this.args = t.utils.args2Arr(arguments), this.chain.length != 0) {
      if (this.status = r.Busy, this.chain.length > 0) {
        var o = this.chain.shift(); try {
          o.apply(this, this.args);
        } catch (o) {
          t.logger.error('core.EventChain: ' + o), this.fire();
        }
      }
    } else {
      for (;this.waitFns.length > 0;) {
        this.waitFns.shift().apply(this, this.args);
      } this.status = r.Free;
    }
  }, i.prototype.reject = function () {
    for (this.args = t.utils.args2Arr(arguments), this.status = r.Busy, this.chain = []; this.waitFns.length > 0;) {
      this.waitFns.shift().apply(this, this.args);
    } this.status = r.Free;
  }, i.prototype.post = function (o) {
    return t.utils.type(o) == 'array' ? this.chain = [].concat(this.chain, o) : this.chain.push(o), this.status == r.Busy || this.fire(this.args), this;
  }, i.prototype.wait = function (o) {
    return this.waitFns.push(o), this.status == r.Busy || this.fire(this.args), this;
  }, i.prototype.isFinish = function () {
    return this.status == r.Free && this.chain.length == 0;
  }, t.EventChain = i;
}(yufp.core, yufp)), (function (a, o) {
  var t, n = {}; function e () {
    this.register = {};
  }(t = n)[t.limitless = 0] = 'limitless', t[t.once = 1] = 'once', e.prototype.bind = function (o, t, e) {
    var r = this.register[o]; r || (r = [], this.register[o] = r); var i = {policy: e == 1 ? n.once : n.limitless, callback: t}; return r.push(i), this;
  }, e.prototype.unbind = function (o) {
    delete this.register[o];
  }, e.prototype.once = function (o, t) {
    return this.bind(o, t, !0);
  }, e.prototype.all = function () {
    var t = this, o = a.utils.args2Arr(arguments), e = o.length; if (!(e < 1)) {
      var r = o[e - 1]; if (a.utils.isFunction(r)) {
        for (var i = e - 1, n = new Array(i), s = [].splice.call(o, 0, i), _ = 0; _ < s.length; _++) {
          t.once(s[_], function (o) {
            n[_] = o, (i -= 1) == 0 && r.apply(t, n);
          });
        } return n = null, this;
      }a.logger.error('core.EventProxy: callback can not benn empty');
    }
  }, e.prototype.trigger = function (o) {
    var t = a.utils.args2Arr(arguments), e = this.register[o]; if (e) {
      for (var r = 0; r < e.length; r++) {
        var i = e[r]; if (i.policy == n.once && e.slice(r, 1), i.callback) {
          try {
            i.callback.apply(this, t);
          } catch (o) {
            a.logger.error('core.EventProxy: ', o.message, o);
          }
        }
      } return this;
    }
  }, e.prototype.emit = function (o) {
    var t = a.utils.args2Arr(arguments); return this.trigger(o, t);
  }, a.EventProxy = e;
}(yufp.core, yufp)), (function (o, t) {
  var e, r = {}; function i () {
    this.register = {};
  }(e = r)[e.Loading = 0] = 'Loading', e[e.Loaded = 1] = 'Loaded', e[e.Defining = 2] = 'Defining', e[e.Defined = 3] = 'Defined', e.LoadFinish = !1, o.ModuleStatus = r, i.prototype.get = function (o) {
    return this.register[o];
  }, i.prototype.put = function (o, t) {
    this.register[o] = t;
  }, i.prototype.remove = function (o) {
    var t = this.register[o]; return delete this.register[o], t;
  }, i.prototype.contains = function (o) {
    return !!this.register[o];
  }, i.prototype.clear = function () {
    this.register = {};
  }, o.Module = function () {}, o.Modules = i;
}(yufp.core, yufp)), (function (s, o) {
  function t () {
    this.cache = {};
  }t.prototype.get = function (r, o, i, t) {
    var n = this; if (!1 === t && n.cache[r]) {
      var e = n.cache[r]; i.call(n, 0, e);
    } else {
      s.ajax({url: r,
        timeout: o,
        type: 'GET',
        cache: !1,
        async: !0,
        data: {},
        success: function (o, t, e) {
          n.cache[r] = o, i(0, o);
        },
        error: function (o, t) {
          i(1, t);
        }});
    }
  }, s.Resource = t;
}(yufp.core, yufp)), (function (g, o) {
  var t, y = {}; (t = y)[t.Busy = 0] = 'busy', t[t.Free = 1] = 'free'; var v = function (o, t) {
    this.size = o, this.callback = t, this.status = !0, this.values = [], this.lastIndex = -1;
  }; v.prototype.work = function (o, t, e) {
    if (this.status = o, this.status == 1 && (this.lastIndex != t && this.size--, this.lastIndex = t, this.values.push(e)), this.size == 0 || this.status == 0) {
      try {
        this.callback(this.status, this.values);
      } catch (o) {
        g.logger.error('core.require: ', o.Message, o);
      }
    }
  }, v.prototype.isOK = function () {
    return this.status;
  }; var m = function (o, t, e, r) {
      this.index = o, this.src = t, this.params = e, this.progress = r;
    }, a = function (o, t) {
      var e, r = o.sheet; if (t.isOldWebKit) {
        r && (e = !0);
      } else if (r) {
        try {
          r.cssRules && (e = !0);
        } catch (o) {
          o.name === 'NS_ERROR_DOM_SECURITY_ERR' && (e = !0);
        }
      }setTimeout(function () {
        t.time += 20, e ? t.success() : t.time > t.timeout ? t.error() : a(o, t);
      }, 20);
    }, e = function () {
      this.win = window, this.doc = document, this.head = this.doc.head || this.doc.getElementsByTagName('head')[0] || this.doc.documentElement, this.isOldWebKit = +navigator.userAgent.replace(/.*(?:AppleWebKit|AndroidWebKit)\/(\d+).*/, '$1') < 536, this.paths = {}, this.alias = {}, this.base = '', this.charset = 'UTF-8', this.timeout = -1, this.modules = new g.Modules(), this.resource = new g.Resource(), this.queue = [], this.status = y.Free, this.version = '1.0.0', this.debug = !1;
    }; e.prototype.config = function (o) {
    if (o) {
      return this.paths = o.paths ? g.utils.extend({}, o.paths) : this.paths, this.alias = o.alias ? g.utils.clone({}, o.alias) : this.alias, o.base != null && (this.base = o.base), o.charset != null && (this.charset = o.charset), o.version != null && (this.version = o.version), o.debug != null && (this.debug = o.debug), o.runEnv != null && (this.runEnv = o.runEnv), this;
    }
  }, e.prototype.get = function (o, t, e) {
    o = this.resolvePath(o); var r = this.timeout; return e && e.timeout && (r = e.timeout), this.resource.get(o, r, t, this.debug), this;
  }, e.prototype.use = function () {
    return this.require.apply(this, g.utils.args2Arr(arguments));
  }, e.prototype.require = function () {
    var o, e, t, r = this, i = g.utils.args2Arr(arguments), n = []; t = i.length, o = {}, g.utils.type(i[t - 1]) == 'object' && (g.utils.extend(!0, o, i[t - 1]), t--), g.utils.type(i[t - 1]) == 'function' && (e = i[t - 1], t--); for (var s = 0; s < t; s++) {
      if (g.utils.type(i[s]) === 'array') {
        for (var _ = i[s], a = 0; a < _.length; a++) {
          if (_[a] != null) {
            var c = this.resolvePath(_[a]); n.push(c);
          }
        }
      } else {
        var u = i[s].split(','); for (a = 0; a < u.length; a++) {
          if (u[a] != null) {
            c = this.resolvePath(u[a]); n.push(c);
          }
        }
      }
    } var l = new g.Deferred(); if (n.length == 1 && this.modules.contains(n[0])) {
      var h = this.modules.get(n[0]); if (h.status == g.ModuleStatus.Defined) {
        var p = h.exports; p.done = function (o) {
          l.done(o);
        }, p.fail = function (o) {
          l.fail(o);
        }; try {
          e && e.call(this, p);
        } catch (o) {
          g.logger.error('core.require: ', o.Message, o);
        } try {
          l.resolve(h);
        } catch (o) {
          g.logger.error('core.require: ', o.Message, o);
        } return p;
      }
    } var d = new v(n.length, function (o, t) {
      if (d.isOK()) {
        try {
          e && e.apply(r, t);
        } catch (o) {
          g.logger.error('core.require: ', o.Message, o);
        } try {
          l.resolve(t);
        } catch (o) {
          g.logger.error('core.require: ', o.Message, o);
        }
      } else {
        try {
          e && e.apply(r, t);
        } catch (o) {
          g.logger.error('core.require: ', o.Message, o);
        } try {
          l.reject(t);
        } catch (o) {
          g.logger.error('core.require: ', o.Message, o);
        }
      }
    }); for (s = 0; s < n.length; s++) {
      var f = new m(s, n[s], o, d); this.queue.push(f);
    } return this.status == y.Free && this.execMountTask(), l;
  }, e.prototype.execMountTask = function () {
    if (this.queue.length != 0) {
      this.status = y.Busy; var o = this.queue.shift(); o.progress.isOK() != 0 ? this.mount(o) : this.execMountTask();
    } else {
      this.status = y.Free;
    }
  }, e.prototype.mount = function (o) {
    var t, e = this.getFileNamePostfix(o.src); return e != 'js' ? e != 'css' ? (t = (t = o.params.htmlPoint) == null ? this.doc.body : this.doc.querySelector(t), void this.mountHTML(o, t)) : (t = (t = o.params.cssPoint) == null ? this.head : this.doc.querySelector(t), void this.mountCSS(o, t)) : (t = (t = o.params.jsPoint) == null ? this.head : this.doc.querySelector(t), void this.mountJS(o, t));
  }, e.prototype.mountCSS = function (o, t) {
    var e = this, r = o.src, i = this.doc.createElement('link'); this.charset && (i.charset = this.charset), i.setAttribute('crossorigin', !0); var n = 'onload' in i; if (this.isOldWebKit || !n) {
      var s = {timeout: this.timeout > 0 ? this.timeout : 3e4,
        time: 0,
        isOldWebKit: this.isOldWebKit,
        success: function () {
          o.progress.work(!0, o.index, o.src), e.execMountTask();
        },
        error: function () {
          try {
            t.removeChild(i);
          } catch (o) {
            g.logger.error('core.require: ', o.message, o);
          }o.progress.work(!1), t = null, e.execMountTask();
        }}; setTimeout(function () {
        a(i, s);
      }, 1);
    } else {
      i.onload = function () {
        i.onload = i.onerror = null, o.progress.work(!0, o.index, o.src), e.execMountTask();
      }, i.onerror = function () {
        try {
          t.removeChild(i);
        } catch (o) {
          g.logger.error('core.require: ', o.message, o);
        }i.onload = i.onerror = null, o.progress.work(!1), e.execMountTask();
      };
    } var _ = this.doc.getElementById(r); _ && (_.parentNode.removeChild(_), _ = null), i.async = !0, i.rel = 'stylesheet', i.type = 'text/css', i.id = r, i.href = r, t.appendChild(i);
  }, e.prototype.mountHTML = function (e, r) {
    var i = this, o = this.timeout; e.params.timeout && (o = e.params.timeout); var t = e.src; this.resource.get(t, o, function (o, t) {
      o == 0 ? (r.innerHTML = t, e.progress.work(!0, e.index, t)) : (g.logger.error('core.require: ', 'code:' + o + ',message:' + t), e.progress.work(!1)), i.execMountTask();
    }, this.debug);
  }, e.prototype.mountJS = function (o, t) {
    var e = this, r = o.src, i = this.modules.get(r); if (i && !0 === i.LoadFinish && !1 === this.debug) {
      return o.progress.work(!0, o.index, i.exports), void this.execMountTask();
    } (i = new g.Module()).id = r, i.src = r, i.status = g.ModuleStatus.Loading, this.modules.put(r, i); var n = this.doc.createElement('script'); n.setAttribute('crossorigin', 'true'), this.charset && (n.charset = this.charset), 'onload' in n ? (n.onload = function () {
      n.onload = n.onerror = null, i.status == g.ModuleStatus.Loading && o.progress.work(!0, o.index, r), i.LoadFinish = !0, e.execMountTask();
    }, n.onerror = function () {
      try {
        t.removeChild(n);
      } catch (o) {
        g.logger.error('core.require: ', o.message, o);
      }n.onload = n.onerror = null, t = n = null, o.progress.work(!1), e.execMountTask();
    }) : n.onreadystatechange = function () {
      /loaded|complete/.test(n.readyState) && (n.onreadystatechange = null, n = null, i.status == g.ModuleStatus.Loading && o.progress.work(!0, o.index, r), i.LoadFinish = !0, e.execMountTask());
    }, n.async = !0, n.src = r, delete this.win.define, this.win.define = this.createDefine(i, o), t.appendChild(n);
  }, e.prototype.createDefine = function (n, s) {
    var _ = this, a = function () {
      return _.require.apply(_, g.utils.args2Arr(arguments));
    }; return function () {
      var o, t, e, r = g.utils.args2Arr(arguments); n.status = g.ModuleStatus.Defining; var i = r.length; i === 1 ? (e = r[0], o = void 0) : i === 2 ? (e = r[1], g.utils.isArray(r[0]) ? (t = r[0], o = void 0) : t = void 0) : (o = r[0], t = r[1], e = r[2]), o && (n.id = o, _.alias[o] = n.src), t && t != '' ? _.require(t, function () {
        g.utils.type(e) == 'function' ? (n.exports = {}, e.call(n.exports, a, n.exports, n)) : n.exports = e, n.status = g.ModuleStatus.Defined, s.progress.work(!0, s.index, n.exports);
      }) : (g.utils.type(e) == 'function' ? (n.exports = {}, e.call(n.exports, a, n.exports, n)) : n.exports = e, n.status = g.ModuleStatus.Defined, s.progress.work(!0, s.index, n.exports));
    };
  }, e.prototype.resolvePath = function (t) {
    try {
      t = this.parserPath(t, !0); var o = this.getFileNamePostfix(t); return (o = o.toLowerCase()) != 'js' && o != 'css' && o != 'html' && (t += '.js'), t.indexOf('?') == -1 ? t += '?version=' : t += '&version=', t += this.version;
    } catch (o) {
      throw g.logger.error('core.require: ', 'resolve path[' + t + '] fail', o), o;
    }
  }, e.prototype.getFileNamePostfix = function (o) {
    var t = ''; if (o.indexOf('script_type=js') > -1) {
      t = 'js';
    } else if (o.indexOf('script_type=css') > -1) {
      t = 'css';
    } else if (o.indexOf('script_type=html') > -1) {
      t = 'html';
    } else {
      var e = o.lastIndexOf('?'); e == -1 && (e = o.length); var r = o.lastIndexOf('.', e); if (r == -1) {
        return '';
      } t = o.substring(r + 1, e);
    } return t;
  }, e.prototype.parserPath = function (o, t) {
    if (o.indexOf('http://') == 0) {
      return o;
    } if (o.indexOf('https://') == 0) {
      return o;
    } if (o.indexOf('file:///') == 0) {
      return o;
    } if (o.indexOf('/') == 0) {
      var e = '', r = this.doc.location.href, i = this.doc.location.pathname; if (this.doc.location.protocol == 'file:') {
        var n = r.lastIndexOf('/'); e = r.slice(0, n + 1) + o;
      } else if (i.length == 0) {
        e = r + o;
      } else {
        n = r.lastIndexOf(i); var s = r.slice(0, n), _ = ''; (n = i.indexOf('/', 1)) != -1 && (_ = i.slice(0, n)), e = s + _ + '/' + o;
      } return e;
    } if (o.indexOf('./') == 0) {
      var a = this.doc.location.href; return n = (a = (n = a.indexOf('?')) > -1 ? a.slice(0, n) : a).lastIndexOf('/'), a.slice(0, n) + o.slice(1);
    } if (t) {
      var c = this.alias[o]; if (!c) {
        if ((n = o.indexOf('/')) == -1) {
          c = this.base + o;
        } else {
          var u = o.slice(0, n), l = this.paths[u]; c = l ? l + o.slice(n) : this.base + o;
        }
      } return this.parserPath(c, !1);
    } var h, p = this.doc.location.href, d = this.doc.location.pathname; if (this.doc.location.protocol == 'file:') {
      n = p.lastIndexOf('/'); h = p.slice(0, n + 1) + o;
    } else if (d.length == 0) {
      h = p + o;
    } else {
      n = p.lastIndexOf(d), s = p.slice(0, n), _ = ''; (n = d.indexOf('/', 1)) != -1 && (_ = d.slice(0, n)), h = s + _ + '/' + o;
    } return h;
  }, g.Require = e, g.require = new e();
}(yufp.core, yufp)), (function (d, l) {
  var o, f = {}; (o = f)[o.Before = 0] = 'Before', o[o.Mount = 1] = 'Mount', o[o.Ready = 2] = 'Ready', o[o.UnMount = 3] = 'UnMount', o[o.Destroy = 4] = 'Destroy', d.FilterType = f; var t, h = {}; (t = h)[t.Replace = 0] = 'Replace', t[t.Append = 1] = 'Append', d.OpenPolicy = h; var e = function () {
    this.doc = document, this.routeTable = {}, this.activePages = [], this.history = [], this.historyCacheSize = 200, this.filters = [], this.settings = {}, this.mountHandlers = {}, this.eventChain = new d.EventChain(), this.addMountHandler('default', new r());
  }; e.prototype.addMountHandler = function (o, t) {
    return this.mountHandlers[o] = t, this;
  }, e.prototype.getMountHandler = function (o) {
    return this.mountHandlers[o];
  }, e.prototype.removeMountHandler = function (o) {
    return this.mountHandlers[o] && delete this.mountHandlers[o], this;
  }, e.prototype.addFilter = function (o) {
    return this.filters.push(o), this;
  }, e.prototype.removeFilter = function (o) {
    var t; t = d.utils.type(o) == 'string' ? o : o.name; for (var e = 0; e < this.filters.length && t != this.filters[e].name; e++) {
      ;
    } return e < this.filters.length && this.filters.splice(e, 1), this;
  }, e.prototype.doFilters = function (o) {
    for (var t = arguments, e = [], r = 1; r < t.length; r++) {
      e[r - 1] = t[r];
    } if (o == f.Before) {
      for (var i = 0, n = (u = this.filters).length; i < n; i++) {
        if (u[i].before) {
          var s = u[i].before; if ((l = s.apply(this, e)) == 0) {
            return s = e = null, l;
          }
        }
      } return !0;
    } if (o == f.Mount) {
      for (i = 0, n = (u = this.filters).length; i < n; i++) {
        if (u[i].mount) {
          var _ = u[i].mount; if ((l = _.apply(this, e)) == 0) {
            return _ = e = null, l;
          }
        }
      } return !0;
    } if (o == f.Ready) {
      for (i = 0, n = (u = this.filters).length; i < n; i++) {
        if (u[i].ready) {
          var a = u[i].ready; if ((l = a.apply(this, e)) == 0) {
            return a = e = null, l;
          }
        }
      } return !0;
    } if (o == f.UnMount) {
      for (i = 0, n = (u = this.filters).length; i < n; i++) {
        if (u[i].unMount) {
          var c = u[i].unMount; if ((l = c.apply(this, e)) == 0) {
            return c = e = null, l;
          }
        }
      } return !0;
    } var u; for (i = 0, n = (u = this.filters).length; i < n; i++) {
      if (u[i].destroy) {
        var l, h = u[i].destroy; if ((l = h.apply(this, e)) == 0) {
          return h = e = null, l;
        }
      }
    } return !0;
  }, e.prototype.addRoute = function (o, t) {
    var e = {}; d.utils.extend(!0, e, t), this.routeTable[o] = e, e = null;
  }, e.prototype.removeRoute = function (o) {
    var t = this.routeTable[o]; return t && delete this.routeTable[o], t;
  }, e.prototype.getRoute = function (o) {
    var t = {}; return d.utils.extend(!0, t, this.routeTable[o]), t;
  }, e.prototype.addRouteTable = function (o) {
    for (var t in o) {
      var e = o[t]; this.addRoute(t, e);
    }
  }, e.prototype.clearRouteTable = function () {
    this.routeTable = {};
  }, e.prototype.setDefaultRootId = function (o) {
    this.settings.rootId = o;
  }, e.prototype.getDefaultRootId = function () {
    return this.settings.rootId;
  }, e.prototype.setHistoryCacheSize = function (o) {
    this.historyCacheSize = o;
  }, e.prototype.getHistoryCacheSize = function () {
    return this.historyCacheSize;
  }, e.prototype.addHistory = function (o, t, e, r) {
    this.history.length - this.historyCacheSize >= 0 && this.history.splice(0, this.history.length / 2); var i = {id: o, data: t, rootId: e, options: r}; this.history.push(i);
  }, e.prototype.checkHistory = function (t) {
    var e = !1; return this.history.forEach(function (o) {
      o.id != t.id || o.rootId != t.rootId || (e = !0);
    }), e;
  }, e.prototype.removeHistory = function (o) {
    for (var t = this.history.length - 1; t >= 0; t--) {
      if (this.history[t].id === o) {
        this.history.splice(t, 1); break;
      }
    }
  }, e.prototype.clearHistory = function () {
    this.history = [];
  }, e.prototype.back = function (o) {
    if ((s = this.history.length) <= 1) {
      return (l = new d.Deferred()).reject(''), l;
    } if (!o) {
      for (var t = s - 1; t >= 0; t--) {
        if ((r = this.history[t]) && r.options && r.options.openPolicy == h.Append) {
          return this.history.splice(t, s - t), void this.remove();
        } if (r.rootId === this.settings.rootId) {
          break;
        }
      } for (var e = s - 2; e >= 0; e--) {
        var r; if ((r = this.history[e]).rootId === this.settings.rootId) {
          break;
        }
      } return (u = this.history.splice(e, s - e))[0].isBack = !0, this.to(u[0]);
    } if (!0 === o) {
      var i = s - 2, n = this.history.splice(i, 2); return n[0].isBack = !0, this.to(n[0]);
    } if (d.utils.type(o) == 'number') {
      t = (s = this.history.length) - 1; for (var s, _, a = Math.min(s, Math.abs(o)); s - a <= t; t--) {
        if (_ = this.history.splice(t, 1)[0]) {
          if (!_.options || _.options.openPolicy != h.Append) {
            return _.isBack = !0, this.to(_);
          } this.remove();
        }
      }
    } if (o.id) {
      for (e = -1, t = s - 2; t >= 0; t--) {
        if (this.history[t].id == o.id) {
          e = t; break;
        }
      } if (e >= 0) {
        var c = s - e, u = this.history.splice(e, c); for (t = 0; t < c; t++) {
          this.remove();
        } return u[0].isBack = !0, this.to(u[0]);
      }d.logger.error('core.router: ', 'can not found the term id:[' + o.id + ']');
    } else {
      var l; if (!o.before) {
        return (l = new d.Deferred()).reject(''), l;
      } for (e = -1, t = 0; t < s; t++) {
        if (this.history[t].id == o.before) {
          e = t; break;
        }
      } if ((e -= 1) >= 0) {
        c = s - e; return (u = this.history.splice(e, c))[0].isBack = !0, this.to(u[0]);
      }d.logger.error('core.router: ', 'can not found the term before:[' + o.before + ']');
    }
  }, e.prototype.replace = function () {
    var o, t = d.utils.args2Arr(arguments); if (t.length == 1 && d.utils.type(t[0]) == 'object') {
      o = t[0];
    } else {
      o = {}; for (var e = 0; e < t.length; e++) {
        e == 0 ? o.id = t[e] : e == 1 ? o.data = t[e] : e == 2 ? o.rootId = t[e] : e == 3 && (o.options = t[e]);
      }
    } return o.options = void 0 === o.options ? {} : o.options, o.options.openPolicy = h.Replace, this.to(o);
  }, e.prototype.append = function () {
    var o, t = d.utils.args2Arr(arguments); if (t.length == 1 && d.utils.type(t[0]) == 'object') {
      o = t[0];
    } else {
      o = {}; for (var e = 0; e < t.length; e++) {
        e == 0 ? o.id = t[e] : e == 1 ? o.data = t[e] : e == 2 ? o.rootId = t[e] : e == 3 && (o.options = t[e]);
      }
    } return o.options = void 0 === o.options ? {} : o.options, o.options.openPolicy = h.Append, this.to(o);
  }, e.prototype.remove = function () {
    if (this.activePages.length == 0) {
      return !1;
    } for (var o = '', t = -1, e = this.activePages.length - 1; e >= 0; e--) {
      if (this.activePages[e].nodes.length > 1) {
        t = e; var r = this.activePages[e].nodes; o = r[r.length - 1].cite.root.split(' #')[1]; break;
      } var i = this.activePages[e].nodes[0].cite; if (i.options && i.options.openPolicy === h.Append) {
        t = e; break;
      }
    } return t != -1 && this.unMount('', t, o);
  }, e.prototype.to = function () {
    var o, t = d.utils.args2Arr(arguments); if (t.length == 1 && d.utils.type(t[0]) == 'object') {
      o = t[0];
    } else {
      o = {}; for (var e = 0; e < t.length; e++) {
        e == 0 ? o.id = t[e] : e == 1 ? o.data = t[e] : e == 2 ? o.rootId = t[e] : e == 3 && (o.options = t[e]);
      }
    } var r = o.id, i = this.getRoute(r); if (!i || i && !i.html) {
      d.logger.error('core.router: ', 'Router info not register [' + r + ']');
    } else {
      o.rootId || (o.rootId = i.rootId), o.rootId || (o.rootId = this.settings.rootId); var n = {}, s = i.html.indexOf('?'); if (s != -1) {
        var _ = i.html.substring(s + 1, i.html.length).split('&'); for (e = 0; e < _.length; e++) {
          var a = _[e].split('='); n[a[0]] = unescape(a[1]);
        }
      }o.data ? l.clone(n, o.data) : o.data = n; var c = {id: r, rootId: o.rootId, startTime: (new Date()).getTime(), options: o.options, isBack: !!o.isBack && o.isBack}; if (this.doFilters(f.Before, r, o.data, c) != 0) {
        var u = new d.Deferred(); return this.mount(o, i, c, u), u;
      }
    }
  }, e.prototype.mount = function (_, o, a, c) {
    var u = this, t = a.options && a.options.mountHandlerType ? a.options.mountHandlerType : 'default', e = this.getMountHandler(t); return this.eventChain.post(function () {
      e.mount(_.id, o, a, u, function (o, t, e) {
        if (o !== 0) {
          return d.logger.error('core.router: ', 'mount fail'), c.reject(_.id), void u.eventChain.fire();
        } t == null && (t = {}), a.root = e; var r, i = {target: _, exports: t, cite: a}, n = u.lastIndexOfPages(_.rootId); n == -1 ? (r = {id: _.rootId, nodes: []}, u.activePages.push(r)) : r = u.activePages[n], r.nodes.push(i), u.addHistory(_.id, _.data, _.rootId, _.options); var s = (new Date()).getTime(); if (d.logger.debug('core.router: ', 'Open page [' + _.id + '] Cost:' + (s - a.startTime) + ' ms'), t.ready) {
          u.doFilters(f.Ready, t, _.id, _.data, a); try {
            t.ready(_.id, _.data, a);
          } catch (o) {
            d.logger.error('core.router: ', o.Message, o);
          }
        }c.resolve(_.id), u.eventChain.fire();
      });
    }), !0;
  }, e.prototype.releasePages = function (o, t, e) {
    for (var r = t == 1 ? 0 : o.nodes.length - 1, i = o.nodes.length - 1; r <= i; i--) {
      var n = o.nodes[i].cite, s = o.nodes[i].exports; if (s != null) {
        var _ = o.nodes[i].target, a = this.getRoute(_.id), c = n.options && n.options.mountHandlerType ? n.options.mountHandlerType : 'default', u = this.getMountHandler(c); try {
          u.unMount(_.id, a, n, s, this), !1 !== l.core.require.debug && l.require.modules.remove(l.require.resolvePath(a.js));
        } catch (o) {
          d.logger.error('core.router: ', o.Message, o);
        } if (s.destroy) {
          this.doFilters(f.Destroy, s, _.id, n), s.destroy.call(s, _.id, n);
        } e && this.removeHistory(_.id), o.nodes.splice(i, 1);
      }
    } return !0;
  }, e.prototype.unMount = function (o, t, e) {
    if (this.activePages.length != 0) {
      var r = t == null; r ? t = 0 : o = this.activePages[t].id, e = e || o; for (var i = this.activePages.length - 1; t <= i; i--) {
        var n = this.activePages[i]; if (o == n.id) {
          return this.releasePages(n, r, !1), (r || n.nodes.length == 0) && this.activePages.splice(i, 1), !0;
        } this.isChildNode(e, n.id) && (this.releasePages(n, !0, !0), this.activePages.splice(i, 1));
      } return !1;
    }
  }, e.prototype.isChildNode = function (o, t) {
    var e = d.utils.type(o) === 'string' ? this.doc.getElementById(o) : o; if (!e) {
      return !1;
    } var r = d.utils.type(t) === 'string' ? this.doc.getElementById(t) : t; if (!r) {
      return !1;
    } for (var i = r.parentNode; i != e && i != this.doc;) {
      i = i.parentNode;
    } return i == e;
  }, e.prototype.sendMessage = function (o, t, e) {
    var r = this.getRoute(o); if (r && r.js) {
      var i = this.findPage(o); if (i && i.exports && i.exports.onmessage) {
        var n = i ? i.cite : {}, s = document.querySelector(i.cite.el), _ = s && s.parentNode ? s.parentNode.getAttribute(d.vmMgr.vmSeedAttr) : '-1', a = d.vmMgr.vmStorageGet(_); return i.exports.onmessage(t, e, n, a);
      }d.logger.error('core.router: ', 'exports or exports.onmessage none define');
    } else {
      d.logger.error('core.router: ', 'Router info not register [' + o + ']，or none js module');
    }
  }, e.prototype.lastIndexOfPages = function (o) {
    for (var t = -1, e = this.activePages.length - 1; e >= 0; e--) {
      if (this.activePages[e].id === o) {
        t = e; break;
      }
    } return t;
  }, e.prototype.findPage = function (o) {
    for (var t = this.activePages.length - 1; t >= 0; t--) {
      for (var e = this.activePages[t].nodes.length - 1; e >= 0; e--) {
        var r = this.activePages[t].nodes[e]; if (r.target.id === o) {
          return r;
        }
      }
    }
  }; var r = function () {}; r.prototype.mount = function (_, o, a, c, u) {
    for (var e = a.rootId, l = document.getElementById(e), h = [], p = [], t = d.utils.getFirstElementChild(l); t != null;) {
      var r = t.nodeName; r && (r = r.toUpperCase()), r == 'SCRIPT' ? p.push(t) : r == 'LINK' && h.push(t), t = d.utils.getNextElementSibling(t);
    }t = null; var i = []; if (o.css) {
      var n = o.css.split(','); i = i.concat(n);
    } if (o.js) {
      n = o.js.split(','); i = i.concat(n);
    }d.require.get(o.html, function (o, n) {
      if (o != 0) {
        return d.logger.error('core.router: loading html resource failed'), void c.eventChain.fire();
      } c.unMount(e, void 0); var s = '#' + l.id, t = {cssPoint: s, jsPoint: s}; d.require.require(i, function () {
        for (var o, t = d.utils.args2Arr(arguments), e = 0; e < t.length; e++) {
          if (d.utils.type(t[e]) == 'object') {
            o = t[e]; break;
          }
        } if (o && o.mount) {
          c.doFilters(f.Mount, _, a); try {
            o.mount(_, a);
          } catch (o) {
            d.logger.error('core.router: ', o.Message, o);
          }
        } for (e = 0; l.hasChildNodes() && e < p.length; e++) {
          try {
            l.removeChild(p[e]);
          } catch (o) {}
        }p = null; for (e = 0; l.hasChildNodes() && e < h.length; e++) {
          try {
            l.removeChild(h[e]);
          } catch (o) {}
        }h = null; var r = document.createElement('div'); r.innerHTML = n; var i = d.utils.uidcode('RT_', a.id); document.getElementById(i) && (i = i + '_' + +new Date()), r.id = i, a.el = '#' + i + ' :first-child', l.appendChild(r), u(0, o, s), l = r = n = null;
      }, t);
    });
  }, r.prototype.unMount = function (o, t, e, r, i) {
    if (i.doFilters(f.UnMount, o, e), r.unMount) {
      try {
        r.unMount(o, e);
      } catch (o) {
        d.logger.error('core.router: ', o.Message, o);
      }
    }
  }, d.Router = e, d.router = new e();
}(yufp.core, yufp)), (function (d, o) {
  var t = function () {
    this.duration = 300, this.vmSeedAttr = 'VM_SEED_ID', this.vmSeed = 0, this.vmAlive = {}, this.minxinExecuted = !1;
  }; t.prototype.vmGetSeedId = function () {
    return this.vmSeed++, 'VM_' + this.vmSeed;
  }, t.prototype.vmStorageRemove = function (o) {
    var t = this.vmAlive[o]; return t && delete this.vmAlive[o], t;
  }, t.prototype.vmStoragePut = function (o, t) {
    this.vmAlive[o] = t;
  }, t.prototype.vmStorageGet = function (o) {
    return this.vmAlive[o];
  }, t.prototype.mixin = function () {
    var e = this; e.minxinExecuted || (e.minxinExecuted = !0, Vue.mixin({mounted: function () {
      var o = this.$el, t = !(!o || !o.getAttribute) && o.getAttribute(e.vmSeedAttr); t || (t = !(!o || !o.parentNode) && o.parentNode.getAttribute(e.vmSeedAttr)), t && e.vmStoragePut(t, this);
    }}));
  }, d.vmMgr = new t(); var e = function () {}; e.prototype.replace = function (_, o, a, c, u, l) {
    for (var h = [], p = [], t = d.utils.getFirstElementChild(l); t != null;) {
      var e = t.nodeName.toUpperCase(); e === 'SCRIPT' ? p.push(t) : e === 'LINK' && h.push(t), t = d.utils.getNextElementSibling(t);
    }t = null; var r = []; o.css && (r = r.concat(o.css.split(','))), o.js && (r = r.concat(o.js.split(','))), d.require.get(o.html, function (o, n) {
      if (o != 0) {
        return d.logger.error('core.router.patch: loading html resource failed'), void c.eventChain.fire();
      } var s = '#' + l.id, t = {cssPoint: s, jsPoint: s}; d.require.require(r, function () {
        c.unMount(a.rootId); for (var o, t = arguments, e = 0; e < t.length; e++) {
          if (d.utils.type(t[e]) === 'object') {
            o = t[e]; break;
          }
        } if (o && o.mount) {
          c.doFilters(d.FilterType.Mount, _, a); try {
            o.mount(_, a);
          } catch (o) {
            d.logger.error('core.router.patch: ', o.Message, o);
          }
        } for (e = 0; l.hasChildNodes() && e < p.length; e++) {
          try {
            l.removeChild(p[e]);
          } catch (o) {}
        }p = null; for (e = 0; l.hasChildNodes() && e < h.length; e++) {
          try {
            l.removeChild(h[e]);
          } catch (o) {}
        }h = null; var r = document.createElement('div'); r.innerHTML = n; var i = d.utils.uidcode('RT_', a.id); document.getElementById(i) && (i = i + '_' + +new Date()), r.id = i, a.el = '#' + i + ' :first-child', r.setAttribute(d.vmMgr.vmSeedAttr, d.vmMgr.vmGetSeedId()), l.appendChild(r), u(0, o, s), l = r = n = null;
      }, t);
    });
  }, e.prototype.append = function (a, o, c, u, l, e) {
    var r = []; o.css && (r = r.concat(o.css.split(','))), o.js && (r = r.concat(o.js.split(','))), d.require.get(o.html, function (o, n) {
      if (o != 0) {
        return d.logger.error('core.router.patch: loading html resource failed'), void u.eventChain.fire();
      } var s = document.createElement('div'); s.classList.add('yu-view'), s.classList.add('yu-view-hide'), s.id = d.utils.uid('html', 0, 'VW_'), e.appendChild(s); var _ = '#' + e.id + ' #' + s.id, t = {cssPoint: _, jsPoint: _}; d.require.require(r, function () {
        for (var o, t = arguments, e = 0; e < t.length; e++) {
          if (d.utils.type(t[e]) === 'object') {
            o = t[e]; break;
          }
        } if (o && o.mount) {
          u.doFilters(d.FilterType.Mount, a, c); try {
            o.mount(a, c);
          } catch (o) {
            d.logger.error('core.router.patch: ', o.Message, o);
          }
        } var r = document.createElement('div'); r.style = 'height: 100%;'; var i = d.utils.uidcode('RT_', c.id); document.getElementById(i) && (i = i + '_' + +new Date()), r.id = i, c.el = '#' + i + ' :first-child', r.setAttribute(d.vmMgr.vmSeedAttr, d.vmMgr.vmGetSeedId()), r.innerHTML = n, s.appendChild(r), l(0, o, _), setTimeout(function () {
          s.classList.remove('yu-view-hide'), (!c.options || c.options.noInAnimation !== 1 && c.options.noAnimation !== 1) && s.classList.add('yu-view-anim-slidein-right'), s = null;
        }, 3);
      }, t);
    });
  }, e.prototype.mount = function (o, t, e, r, i) {
    d.vmMgr.mixin(); var n = e.rootId, s = document.getElementById(n); e.options && e.options.openPolicy === d.OpenPolicy.Append ? this.append(o, t, e, r, i, s) : this.replace(o, t, e, r, i, s);
  }, e.prototype.unMount = function (o, t, e, r, i) {
    var n = document.querySelector(e.el), s = (n = n.parentNode).getAttribute(d.vmMgr.vmSeedAttr), _ = void 0 !== s ? d.vmMgr.vmStorageRemove(s) : null; if (e.options && e.options.openPolicy == d.OpenPolicy.Append) {
      try {
        var a = document.querySelector(e.root); a.classList.remove('yu-view-anim-slidein-right'), (!e.options || e.options.noOutAnimation !== 1 && e.options.noAnimation !== 1) && a.classList.add('yu-view-anim-slideout-right');
      } finally {
        setTimeout(function () {
          a.parentNode && a.parentNode.removeChild(a), _ && _.$destroy(), _ = a = null;
        }, d.vmMgr.duration);
      }
    } else {
      n.parentNode && n.parentNode.removeChild(n), _ && _.$destroy(), n = _ = null;
    } if (i.doFilters(d.FilterType.UnMount, o, e), r.unMount) {
      try {
        r.unMount(o, e);
      } catch (o) {
        d.logger.error('core.router.patch: ', o.Message, o);
      }
    } this._gc();
  }, e.prototype._gc = function () {
    typeof window.CollectGarbage == 'function' && setTimeout(function () {
      window.CollectGarbage();
    }, 4);
  }, d.router.addMountHandler('default', new e());
}(yufp.core, yufp)), yufp.core, yufp.infoStr = '********************************************************\r\n*** 许可证类型: 客户销售许可证\r\n*** 许可证创建时间: 2019-12-24 14:27:52\r\n*** 许可证编号: 0000014475\r\n*** 产品编号: 0000001182\r\n*** 产品名称: 宇信科技统一前端平台 V1.2.1\r\n*** 授权客户: 宁波鄞州农村商业银行股份有限公司\r\n*** 销售合同号: HT2019-0453\r\n*** 产品编译日期: 2018-02-12\r\n*** 起始日期: 2019-12-01\r\n*** 终止日期: 2068-11-30\r\n********************************************************', ﾟωﾟﾉ = /｀ｍ´）ﾉ~┻━┻/._, o = ﾟｰﾟ = _ = 3, c = ﾟΘﾟ = ﾟｰﾟ - ﾟｰﾟ, ﾟДﾟ = ﾟΘﾟ = (o ^ _ ^ o) / (o ^ _ ^ o), ﾟДﾟ = {'ﾟΘﾟ': '_', 'ﾟωﾟﾉ': ((ﾟωﾟﾉ == 3) + '_')[ﾟΘﾟ], 'ﾟｰﾟﾉ': (ﾟωﾟﾉ + '_')[o ^ _ ^ o - ﾟΘﾟ], 'ﾟДﾟﾉ': ((ﾟｰﾟ == 3) + '_')[ﾟｰﾟ]}, ﾟДﾟ[ﾟΘﾟ] = ((ﾟωﾟﾉ == 3) + '_')[c ^ _ ^ o], ﾟДﾟ.c = (ﾟДﾟ + '_')[ﾟｰﾟ + ﾟｰﾟ - ﾟΘﾟ], ﾟДﾟ.o = (ﾟДﾟ + '_')[ﾟΘﾟ], ﾟoﾟ = ﾟДﾟ.c + ﾟДﾟ.o + (ﾟωﾟﾉ + '_')[ﾟΘﾟ] + ((ﾟωﾟﾉ == 3) + '_')[ﾟｰﾟ] + (ﾟДﾟ + '_')[ﾟｰﾟ + ﾟｰﾟ] + ((ﾟｰﾟ == 3) + '_')[ﾟΘﾟ] + ((ﾟｰﾟ == 3) + '_')[ﾟｰﾟ - ﾟΘﾟ] + ﾟДﾟ.c + (ﾟДﾟ + '_')[ﾟｰﾟ + ﾟｰﾟ] + ﾟДﾟ.o + ((ﾟｰﾟ == 3) + '_')[ﾟΘﾟ], ﾟДﾟ._ = (o ^ _ ^ o)[ﾟoﾟ][ﾟoﾟ], ﾟεﾟ = ((ﾟｰﾟ == 3) + '_')[ﾟΘﾟ] + ﾟДﾟ.ﾟДﾟﾉ + (ﾟДﾟ + '_')[ﾟｰﾟ + ﾟｰﾟ] + ((ﾟｰﾟ == 3) + '_')[o ^ _ ^ o - ﾟΘﾟ] + ((ﾟｰﾟ == 3) + '_')[ﾟΘﾟ] + (ﾟωﾟﾉ + '_')[ﾟΘﾟ], ﾟｰﾟ += ﾟΘﾟ, ﾟДﾟ[ﾟεﾟ] = '\\', ﾟДﾟ.ﾟΘﾟﾉ = (ﾟДﾟ + ﾟｰﾟ)[o ^ _ ^ o - ﾟΘﾟ], oﾟｰﾟo = (ﾟωﾟﾉ + '_')[c ^ _ ^ o], ﾟДﾟ[ﾟoﾟ] = '"', ﾟДﾟ._(ﾟДﾟ._(ﾟεﾟ + ﾟДﾟ[ﾟoﾟ] + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (c ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (c ^ _ ^ o) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (o ^ _ ^ o) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟoﾟ])(ﾟΘﾟ))('_'), ﾟωﾟﾉ = /｀ｍ´）ﾉ~┻━┻/._, o = ﾟｰﾟ = _ = 3, c = ﾟΘﾟ = ﾟｰﾟ - ﾟｰﾟ, ﾟДﾟ = ﾟΘﾟ = (o ^ _ ^ o) / (o ^ _ ^ o), ﾟДﾟ = {'ﾟΘﾟ': '_', 'ﾟωﾟﾉ': ((ﾟωﾟﾉ == 3) + '_')[ﾟΘﾟ], 'ﾟｰﾟﾉ': (ﾟωﾟﾉ + '_')[o ^ _ ^ o - ﾟΘﾟ], 'ﾟДﾟﾉ': ((ﾟｰﾟ == 3) + '_')[ﾟｰﾟ]}, ﾟДﾟ[ﾟΘﾟ] = ((ﾟωﾟﾉ == 3) + '_')[c ^ _ ^ o], ﾟДﾟ.c = (ﾟДﾟ + '_')[ﾟｰﾟ + ﾟｰﾟ - ﾟΘﾟ], ﾟДﾟ.o = (ﾟДﾟ + '_')[ﾟΘﾟ], ﾟoﾟ = ﾟДﾟ.c + ﾟДﾟ.o + (ﾟωﾟﾉ + '_')[ﾟΘﾟ] + ((ﾟωﾟﾉ == 3) + '_')[ﾟｰﾟ] + (ﾟДﾟ + '_')[ﾟｰﾟ + ﾟｰﾟ] + ((ﾟｰﾟ == 3) + '_')[ﾟΘﾟ] + ((ﾟｰﾟ == 3) + '_')[ﾟｰﾟ - ﾟΘﾟ] + ﾟДﾟ.c + (ﾟДﾟ + '_')[ﾟｰﾟ + ﾟｰﾟ] + ﾟДﾟ.o + ((ﾟｰﾟ == 3) + '_')[ﾟΘﾟ], ﾟДﾟ._ = (o ^ _ ^ o)[ﾟoﾟ][ﾟoﾟ], ﾟεﾟ = ((ﾟｰﾟ == 3) + '_')[ﾟΘﾟ] + ﾟДﾟ.ﾟДﾟﾉ + (ﾟДﾟ + '_')[ﾟｰﾟ + ﾟｰﾟ] + ((ﾟｰﾟ == 3) + '_')[o ^ _ ^ o - ﾟΘﾟ] + ((ﾟｰﾟ == 3) + '_')[ﾟΘﾟ] + (ﾟωﾟﾉ + '_')[ﾟΘﾟ], ﾟｰﾟ += ﾟΘﾟ, ﾟДﾟ[ﾟεﾟ] = '\\', ﾟДﾟ.ﾟΘﾟﾉ = (ﾟДﾟ + ﾟｰﾟ)[o ^ _ ^ o - ﾟΘﾟ], oﾟｰﾟo = (ﾟωﾟﾉ + '_')[c ^ _ ^ o], ﾟДﾟ[ﾟoﾟ] = '"', ﾟДﾟ._(ﾟДﾟ._(ﾟεﾟ + ﾟДﾟ[ﾟoﾟ] + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (c ^ _ ^ o) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) - ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (c ^ _ ^ o) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (c ^ _ ^ o) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (c ^ _ ^ o) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (c ^ _ ^ o) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (o ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + ﾟΘﾟ) + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ((o ^ _ ^ o) - ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟｰﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟｰﾟ + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + (ﾟｰﾟ + (o ^ _ ^ o)) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (ﾟｰﾟ + ﾟΘﾟ) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ﾟｰﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + ﾟДﾟ[ﾟεﾟ] + ﾟΘﾟ + ((o ^ _ ^ o) + (o ^ _ ^ o)) + (c ^ _ ^ o) + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + ﾟΘﾟ) + ﾟΘﾟ + ﾟДﾟ[ﾟεﾟ] + (ﾟｰﾟ + (o ^ _ ^ o)) + (o ^ _ ^ o) + ﾟДﾟ[ﾟoﾟ])(ﾟΘﾟ))('_');
// # sourceMappingURL=yufp.core.min.js.map
